#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        MxSim.py
## 
## Project :     MX simulator
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      pommier$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Simulate an MX experiment"""

__all__ = ["MxSim", "MxSimClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(MxSim.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	MxSim.additionnal_import

## Device States Description
## No states for this device

class MxSim (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(MxSim.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MxSim.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        MxSim.init_device(self)
        #----- PROTECTED REGION ID(MxSim.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(MxSim.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_ImageDirectory_read = ''
        self.attr_Motors_read = ''
        self.attr_suffix_read = ''
        #----- PROTECTED REGION ID(MxSim.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(MxSim.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.always_executed_hook

    #-----------------------------------------------------------------------------
    #    MxSim read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_ImageDirectory(self, attr):
        self.debug_stream("In read_ImageDirectory()")
        #----- PROTECTED REGION ID(MxSim.ImageDirectory_read) ENABLED START -----#
        attr.set_value(self.attr_ImageDirectory_read)
        
        #----- PROTECTED REGION END -----#	//	MxSim.ImageDirectory_read
        
    def write_ImageDirectory(self, attr):
        self.debug_stream("In write_ImageDirectory()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(MxSim.ImageDirectory_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.ImageDirectory_write
        
    def read_Motors(self, attr):
        self.debug_stream("In read_Motors()")
        #----- PROTECTED REGION ID(MxSim.Motors_read) ENABLED START -----#
        attr.set_value(self.attr_Motors_read)
        
        #----- PROTECTED REGION END -----#	//	MxSim.Motors_read
        
    def read_suffix(self, attr):
        self.debug_stream("In read_suffix()")
        #----- PROTECTED REGION ID(MxSim.suffix_read) ENABLED START -----#
        attr.set_value(self.attr_suffix_read)
        
        #----- PROTECTED REGION END -----#	//	MxSim.suffix_read
        
    
    
        #----- PROTECTED REGION ID(MxSim.initialize_dynamic_attributes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(MxSim.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    MxSim command methods
    #-----------------------------------------------------------------------------
    
    def StartDataCollect(self):
        """ Start the data collection
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In StartDataCollect()")
        #----- PROTECTED REGION ID(MxSim.StartDataCollect) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.StartDataCollect
        

class MxSimClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(MxSim.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MxSim.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`MxSim.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(MxSim.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MxSim.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'StartDataCollect':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'ImageDirectory':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Motors':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'suffix':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "3000",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MxSimClass,MxSim,'MxSim')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
